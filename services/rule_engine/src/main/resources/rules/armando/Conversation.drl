package rules.armando;

import java.util.Date;
import java.util.Arrays;

import com.mindsmiths.dbAdapter.DBAdapterAPI;
import com.mindsmiths.dbAdapter.FetchResult;
import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.telegramAdapter.TelegramReceivedMessage;
import com.mindsmiths.ruleEngine.model.Initialize;
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.telegramAdapter.TelegramKeyboardAnswered;
import com.mindsmiths.telegramAdapter.TelegramMultiChoiceKeyboardAnswered;
import com.fasterxml.jackson.databind.node.ObjectNode;

import com.mindsmiths.armory.events.ArmoryEvent; 
import com.mindsmiths.armory.events.SubmitEvent; 
import com.mindsmiths.armory.events.UserConnectedEvent; 
import com.mindsmiths.armory.events.UserDisconnectedEvent;

import agents.Armando;
import agents.AgentAgent;

import signals.RatingSignal;


rule "First contact"
    salience 100
    when
        initialize: Initialize() from entry-point "agent-created"
        agent: Armando()
    then
        agent.sendMessage("Hej, moje ime je Armando i ja sam pametni agent za nekretnine!");
        DBAdapterAPI.fetchUser(agent.getUserId());
        modify(agent) {
            addConnection("armory", agent.getConnection("telegram"))
        };
        delete(initialize);
end

rule "Receive user data"
    when
        res: FetchResult(success == true) from entry-point "signals"
        agent: Armando()
    then
        Log.warn("Fetched user!");
        modify(agent) {
            setUser(res.getUsers().get(0)),
            setLastInteractionTime(new Date())
        };
        agent.displayUI(true);
        agent.sendFirstQuestion();
        delete(res);
end

rule "Re-engage costumer"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Armando(
            lastInteractionTime before[30s] ts
        )
    then
        modify(agent) {
            setLastInteractionTime(new Date())
        };
        agent.sendQuestion();
end

rule "Receive single answer"
    when
        answer: TelegramKeyboardAnswered() from entry-point "signals"
        agent: Armando()
    then
        agent.handleAnswer(Arrays.asList(answer.getAnswer()));
        delete(answer);
end

rule "Receive multi answer"
    when
        answer: TelegramMultiChoiceKeyboardAnswered() from entry-point "signals"
        agent: Armando()
    then
        agent.handleAnswer(answer.getAnswers());
        delete(answer);
end

rule "User connected event"
    when 
        event: UserConnectedEvent() from entry-point "signals"
        agent: Armando()
    then
        agent.displayUI(true);
        delete(event);
end

rule "Armory submit"
    when
        event: SubmitEvent() from entry-point "signals"
        agent: Armando()
    then
        Log.info(event.getData().get("submit").asText());
        if (event.getData().get("submit").asText().equals("getrating")) {
            Log.info(agent.getUser().getName() + " " + agent.getUser().getSurname());
            agent.displayUI(false);
        }
        if (event.getData().get("submit").asText().equals("submitrating")) {
            agent.displayUI("date");
        }
        if (event.getData().get("submit").asText().equals("date")) {
            agent.sendFirst(AgentAgent.class, new RatingSignal(agent.getUser(), event.getData().get("date").get("text").asText()));
            agent.displayUI(false);
        }
        delete(event);
end
